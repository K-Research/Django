
c:\study\

 

1. django-admin startproject mysite

 

	mysite/mysite 생성

	상위 mysite -> Django

	

	c:\study\mysite\mysite ->

	c:\study\Django\mysite

 

2. python manage.py startapp polls

 

	polls 생성

 

3. settings.py

	1. ALLOWED_HOSTS = ['192.168.55.102', 'localhost', '127.0.0.1']

	

	2. polls 어플리케이션 등록

		INSTALLED_APPS = [

 		   'django.contrib.admin',

		   'django.contrib.auth',

 		   'django.contrib.contenttypes',

   		   'django.contrib.sessions',

  		   'django.contrib.messages',

		   'django.contrib.staticfiles',

   		   'polls.apps.PollsConfig',

		]

 

	3. DATABASE 가 sqlite3 인지 확인.

 

	4. 타임존 지정

		# TIME_ZONE = 'UTC'

		TIME_ZONE = 'Asia/Seoul'		

 

4. 기본 테이블 생성

   python manage.py migrate

	-> db.sqlite3 파일이 생성됨

 

5. 지금까지 작업확인 - 	runserver 실행

	

	1. python manage.py runserver 0.0.0.0:8000  또는 0:8000

	웹브라우저 키고

		http://127.0.0.1:8000

		http://127.0.0.1:8000/admin

 

6. admin 계정 만들기

	1. python manage.py createsuperuser

		ID와 Password 생성  ->  bit / 1234

 

----------------------------------------- 어플리케이션 개발하기

1. models.py (테이블을 정의)

	장고에서는 테이블을 하나의 클래스로 정의하고,

	테이블 클래스는 django.db.models.Model 클래스를 상속받아 정의

	Question 과 Choice 클래스 제작

 

class Question(models.Model):

    question_text = models.CharField(max_length=200)

    pub_date = models.DateTimeField('date published')

 

    def __str__(self):

        return self.question_text

 

 

class Choice(models.Model):

    question = models.ForeignKey(Question, on_delete=models.CASCADE)

    choice_text = models.CharField(max_length=200)

    votes = models.IntegerField(default=0)

 

    def __str__(self):

        return self.choice_text

 

2. admin.py  // admin 사이트에 테이블 반영

	model.py 파일에 정의한 테이블이 Admin사이트에 보이도록 등록

 

from django.contrib import admin		# 얘는 원래 있다.

from polls.models import Question, Choice

 

admin.site.register(Question)

admin.site.register(Choice)

 

3. 데이터베이스 변경사항 반영

	python manage.py makemigrations

	python manage.py migrate

 

결국은 사용법일 뿐이다.